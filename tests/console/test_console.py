import allure

from playwright.sync_api import Page, BrowserContext, expect

from helper.configuration_manager import ConfigurationManager
from tests.common import screenshot_page, login
import pytest

@allure.epic("Console")
@allure.feature("User creation")
@allure.description("This test attempts to create the John Doe user by an admin.")
@pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason="Write tests are disabled")
def test_create_signup(page: Page):
    page.goto("/datahub/")
    page.get_by_role("link", name="login").click()
    page.get_by_role("link", name="Register").click()
    page.get_by_placeholder("First Name").click()
    page.get_by_placeholder("First Name").fill("Bob")
    page.get_by_placeholder("First Name").press("Tab")
    page.get_by_placeholder("Surname").fill("Dylan")
    page.get_by_placeholder("E-mail").click()
    page.get_by_placeholder("E-mail").fill("bob@dylan.com")
    page.get_by_role("combobox").click()
    page.get_by_role("treeitem", name="Project Steering Committee").click()
    page.get_by_placeholder("Password", exact=True).click()
    page.get_by_placeholder("Password", exact=True).fill("azerty123456")
    page.get_by_placeholder("Confirm password").click()
    page.get_by_placeholder("Confirm password").fill("azerty123456")
    screenshot_page(page, "signup")
    page.get_by_role("button", name="Submit").click()
    expect(page.get_by_role("heading", name="Request submitted")).to_be_visible()
    screenshot_page(page, "signup-success")

@allure.epic("Console")
@allure.feature("User creation")
@allure.description("This test attempts to validate the John Doe user by an admin.")
@pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason="Write tests are disabled")
def test_validate_created_user(page: Page):
    login(page)
    page.goto("/console/manager/home")
    page.get_by_role("link", name="Users", exact=True).click()
    page.get_by_role("link", name="Dashboard").click()
    page.get_by_role("link", name="waiting users View & manage").click()
    screenshot_page(page, "waiting-users")
    expect(page.get_by_role("cell", name="Dylan Bob")).to_be_visible()
    expect(page.get_by_role("cell", name="bdylan")).to_be_visible()
    expect(page.get_by_role("cell", name="bob@dylan.com")).to_be_visible()
    expect(page.get_by_role("cell", name="Project Steering Committee")).to_be_visible()
    page.get_by_role("link", name="Dashboard").click()
    page.locator("div").filter(has_text="waiting users View & manage").nth(3).click()
    page.get_by_role("link", name="waiting users View & manage").click()
    screenshot_page(page, "waiting-user")
    page.get_by_role("link", name="Dylan Bob").click()
    page.get_by_role("button", name="Confirm").click()
    screenshot_page(page, "confirm-user")

@allure.epic("Console")
@allure.feature("User informations change")
@allure.description("This test attempts to change Bob Dylan's informations.")
@pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason="Write tests are disabled")
@pytest.mark.flaky(reruns=0)
def test_change_mail_and_password(page: Page, context: BrowserContext):
    login(page, username="bdylan", password="azerty123456")
    expect(page.get_by_role("link", name="Bob Dylan")).to_be_visible()
    screenshot_page(page, "bob-dylan-login")
    page.get_by_role("link", name="Bob Dylan").click()
    expect(page.get_by_text("bob@dylan.com")).to_be_visible()
    page.get_by_role("link", name="Change Password").click()
    page.get_by_placeholder("Password", exact=True).click()
    page.get_by_placeholder("Password", exact=True).fill("bdylan123456")
    page.get_by_placeholder("Confirm password").click()
    page.get_by_placeholder("Confirm password").fill("bdylan123456")
    page.get_by_role("button", name="Submit").click()
    screenshot_page(page, "change-password")
    expect(page.get_by_text("Password updated successfully")).to_be_visible()
    page.get_by_role("link", name="Bob Dylan").click()
    page.get_by_role("link", name="Change e-mail").click()
    page.get_by_label("E-mail *").click()
    page.get_by_label("E-mail *").fill("bob.d@mymail.com")
    page.get_by_role("button", name="Submit").click()
    screenshot_page(page, "change-email")
    page1 = context.new_page()
    page1.goto("/webmail/?_task=mail&_mbox=INBOX")
    page1.get_by_role("link", name="Inbox").click()
    screenshot_page(page1, "webmail")
    page1.get_by_role("link", name="[geOrchestra] Update your e-").click()
    screenshot_page(page1, "update-email")
    with page1.expect_popup() as page2_info:
        page1.locator("iframe[name=\"messagecontframe\"]").content_frame.get_by_role("link", name="/console/account/validateEmail?token=").click()
        screenshot_page(page1, "validate-email")
    page2 = page2_info.value
    screenshot_page(page2, "email-changed")
    expect(page2.get_by_text("bob.d@mymail.com")).to_be_visible()
    page2.close()
    page1.close()

@allure.epic("Console")
@allure.feature("User roles and delegations change")
@allure.description("This test attempts to change Bob Dylan's roles and add a delagation.")
@pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason="Write tests are disabled")
@pytest.mark.flaky(reruns=0)
def test_roles_and_delegations(page: Page):
    login(page, username="bdylan", password="bdylan123456")
    page.goto("/whoami")
    expect(page.locator("body")).to_contain_text("\"username\":\"bdylan\",\"roles\":[\"ROLE_USER\"]")
    page.goto("/console/manager/home")
    expect(page.get_by_text("403")).to_be_visible()
    page.goto("/datahub/")
    page.get_by_role("link", name="logout").click()
    login(page)
    page.goto("/console/manager/home")
    expect(page.locator("div").filter(has_text="Manage users").nth(3)).to_be_visible()
    expect(page.get_by_role("link", name="Manage users")).to_be_visible()
    page.get_by_role("link", name="Manage users").click()
    expect(page.get_by_text("7 users")).to_be_visible()
    page.get_by_role("link", name="Dylan Bob").click()
    page.locator("section").get_by_role("link", name="Roles").click()
    expect(page.locator("section")).to_contain_text("GN_ADMIN")
    page.get_by_label("GN_ADMIN").check()
    page.get_by_label("GN_REVIEWER").check()
    page.locator("section").get_by_role("link", name="Delegations").click()
    page.locator("section").get_by_role("list").nth(1).click()
    page.locator("li").filter(has_text="GN_ADMIN").click()
    page.locator("section").get_by_role("list").nth(3).click()
    page.locator("li").filter(has_text="Project Steering Committee").click()
    page.get_by_role("button", name="Save").click()
    page.get_by_role("link", name="logout").click()
    login(page, username="bdylan", password="bdylan123456")
    page.goto("/whoami")
    expect(page.locator("body")).to_contain_text("\"username\":\"bdylan\",\"roles\":[\"ROLE_GN_ADMIN\",\"ROLE_ORGADMIN\",\"ROLE_USER\",\"ROLE_GN_REVIEWER\"],\"")



@allure.epic("Console")
@allure.feature("User creation")
@allure.description("This test attempts to create the John Doe user by an admin.")
@pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason="Write tests are disabled")
@pytest.mark.flaky(reruns=0)
def test_create_user_by_admin(page: Page):
    login(page)
    page.goto("/console/manager/home")
    page.get_by_role("link", name="Users", exact=True).click()
    expect(page.get_by_role("cell", name="psc+testuser@georchestra.org")).to_be_visible()
    page.get_by_role("link", name="New user").click()
    page.get_by_placeholder("Second Name").click()
    page.get_by_placeholder("Second Name").fill("Doe")
    page.get_by_placeholder("First Name").click()
    page.get_by_placeholder("First Name").fill("John")
    page.get_by_placeholder("E-mail").click()
    page.get_by_placeholder("E-mail").fill("john@doe.com")
    page.get_by_label("", exact=True).first.click()
    page.get_by_role("option", name="Project Steering Committee").click()
    page.get_by_role("button", name="Save").click()
    screenshot_page(page, "user-creation")
    expect(page.get_by_role("heading", name="All users / Doe John")).to_be_visible()
    screenshot_page(page, "user-creation-by-admin")
    page.get_by_role("link", name="Dashboard").click()
    page.reload()
    expect(page.get_by_role("cell", name="jdoe").first).to_be_visible()
    expect(page.get_by_role("cell", name="ÓÇÅ User created").first).to_be_visible()
    screenshot_page(page, "check-logs")


@allure.epic("Console")
@allure.feature("Organization logos")
@allure.description("This test attempts add a logo to Camptocamp organization")
@pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason="Write tests are disabled")
def test_upload_organization_logo(page: Page):
    login(page)
    page.goto("/console/manager/home")
    page.get_by_role("button", name="administration").click()
    page.get_by_role("link", name="Organizations").click()
    page.get_by_role("link", name="Camptocamp").click()
    with page.expect_file_chooser() as fc_info:
        page.get_by_text("Upload logo").click()
    file_chooser = fc_info.value
    file_chooser.set_files("./resources/images/logoipsum.png")
    page.get_by_role("button", name="Save").click()
    page.get_by_role("link", name="All orgs").click()
    page.get_by_role("link", name="Camptocamp").click()
    expect(page.locator("form[name=\"orgForm\"]").get_by_role("img")).to_be_visible()
    screenshot_page(page, "organization-logo")

@allure.epic("Console")
@allure.feature("User deletion")
@allure.description("This test attempts delete the John Doe user by an admin.")
@pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason="Write tests are disabled")
def test_delete_user(page: Page):
    login(page)
    page.goto("/console/manager/home")
    page.get_by_role("link", name="Users", exact=True).click()
    page.get_by_role("link", name="Doe John").click()
    page.get_by_role("link", name="Manage").click()
    page.get_by_role("button", name="Delete user").click()
    expect(page.get_by_text("User deleted")).to_be_visible()
    expect(page.get_by_text("7 users")).to_be_visible()
    screenshot_page(page, "user-deletion")