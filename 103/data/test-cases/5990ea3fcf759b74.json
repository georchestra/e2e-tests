{"uid":"5990ea3fcf759b74","name":"Test the GeoNetwork webapp","fullName":"tests.00-georchestra-base.test_georchestra_headers#test_geoserver_wms_no_double_access_control_allow_origin","historyId":"4e12e5606eb1439b1a5f31778192d41d","time":{"start":1742186196910,"stop":1742186197018,"duration":108},"description":"This test attempts to load GeoNetwork.","descriptionHtml":"<p>This test attempts to load GeoNetwork.</p>\n","status":"failed","statusMessage":"AssertionError: There should be only one header with Access-Control-Allow-Origin\nassert '*, https://g...-0-0-1.nip.io' == '*'\n  \n  - *\n  + *, https://georchestra-127-0-0-1.nip.io","statusTrace":"base_url = 'https://georchestra-127-0-0-1.nip.io'\n\n    @allure.epic(\"Geoserver\")\n    @allure.feature(\"Headers\")\n    @allure.description(\"This test attempts to load GeoNetwork.\")\n    @allure.title(\"Test the GeoNetwork webapp\")\n    def test_geoserver_wms_no_double_access_control_allow_origin(base_url: str):\n        url = base_url + \"/geoserver/wms\"\n        headers = {\"Origin\": base_url}\n    \n        response = requests.get(url, headers=headers, verify=False)\n        response.raise_for_status()\n    \n        access_control_allow_origin_header = response.headers.get(\"Access-Control-Allow-Origin\")\n        # If two headers are present (e.g * and *) response.headers.get(\"Access-Control-Allow-Origin\") returns \"*, *\"\n>       assert access_control_allow_origin_header == \"*\", \\\n            \"There should be only one header with Access-Control-Allow-Origin\"\nE       AssertionError: There should be only one header with Access-Control-Allow-Origin\nE       assert '*, https://g...-0-0-1.nip.io' == '*'\nE         \nE         - *\nE         + *, https://georchestra-127-0-0-1.nip.io\n\ntests/00-georchestra-base/test_georchestra_headers.py:34: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1742185892455,"stop":1742185892455,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1742185892455,"stop":1742185892455,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1742185892455,"stop":1742185892455,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1742185892455,"stop":1742185892455,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"epic","value":"Geoserver"},{"name":"feature","value":"Headers"},{"name":"parentSuite","value":"tests.00-georchestra-base"},{"name":"suite","value":"test_georchestra_headers"},{"name":"host","value":"fv-az1945-66"},{"name":"thread","value":"17394-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.00-georchestra-base.test_georchestra_headers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"5990ea3fcf759b74.json","parameterValues":[]}