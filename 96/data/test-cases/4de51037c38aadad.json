{"uid":"4de51037c38aadad","name":"test_import_shp_datafeeder[chromium]","fullName":"tests.datafeeder.test_ingest_data#test_import_shp_datafeeder","historyId":"a5bfdde5cd0a9b039d7040d631f60f51","time":{"start":1741628931131,"stop":1741628957731,"duration":26600},"description":"This test attempts to load a SHP file through datafeeder and check links.","descriptionHtml":"<p>This test attempts to load a SHP file through datafeeder and check links.</p>\n","status":"failed","statusMessage":"AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\n  \n  - application/geo+json\n  + text/html;charset=UTF-8","statusTrace":"page = <Page url='https://georchestra-127-0-0-1.nip.io/data/ogcapi/collections/antennes/items'>\n\n    @allure.epic(\"Datafeeder\")\n    @allure.feature(\"Ingestion\")\n    @allure.description(\"This test attempts to load a SHP file through datafeeder and check links.\")\n    @pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason=\"Write tests are disabled\")\n    def test_import_shp_datafeeder(page: Page):\n        login(page)\n        page.goto(\"/import/\")\n        screenshot_page(page, \"datafeeder\")\n        page.locator(\"input#undefined\").first.set_input_files(\"./fixtures/antenne.zip\")\n        page.get_by_role(\"checkbox\").check()\n        page.get_by_role(\"button\", name=\"Upload\").click()\n        page.get_by_role(\"button\", name=\"-\", exact=True).click()\n        page.get_by_role(\"button\", name=\"WGS84\").click()\n        page.get_by_role(\"button\", name=\"WGS84\").click()\n        page.get_by_role(\"button\", name=\"Lambert\").click()\n        page.get_by_role(\"button\", name=\"OK, my data are correct\").click()\n        page.locator(\"input[type=\\\"text\\\"]\").click()\n        page.locator(\"input[type=\\\"text\\\"]\").fill(\"Antennes\")\n        page.locator(\"textarea[name=\\\"textArea\\\"]\").click()\n        page.locator(\"textarea[name=\\\"textArea\\\"]\").fill(\"Awesome\")\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"textbox\").fill(\"a\")\n        page.locator(\"#tags div\").nth(1).click()\n        page.get_by_role(\"button\", name=\"Addresses\").click()\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"textbox\").click()\n        page.get_by_role(\"textbox\").fill(\"This is the process\")\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"button\", name=\"Submit\").click()\n        screenshot_page(page, \"after-submit-click\")\n        # wait for the data to be ingested\n        expect(page.get_by_role(\"button\", name=\"Metadata record\")).to_be_visible(timeout=45000)\n        screenshot_page(page, \"after-ingestion\")\n        expect(page.get_by_role(\"button\", name=\"Map viewer\")).to_be_visible()\n        with page.expect_popup() as page1_info:\n            page.get_by_role(\"button\", name=\"Metadata record\").click()\n        page1 = page1_info.value\n        page.wait_for_timeout(10000)\n        screenshot_page(page1, \"metadata\")\n        expect(page1.get_by_text(\"Awesome\").first).to_be_visible()\n        expect(page1.get_by_text(\"Antennes - WMS\")).to_be_visible()\n        page1.close()\n        with page.expect_popup() as page2_info:\n            page.get_by_role(\"button\", name=\"Map viewer\").click()\n        page2 = page2_info.value\n        screenshot_page(page2, \"mapviewer\")\n        expect(page2.locator(\"canvas\")).to_be_visible()\n        page2.close()\n        with page.expect_popup() as page3_info:\n            page.get_by_role(\"button\", name=\"OGC API\").click()\n        page3 = page3_info.value\n        page3_url = page3_info.value.url\n        screenshot_page(page3, \"ogcapi\")\n        expect(page3.locator(\"body\")).to_be_visible()\n        page3.close()\n    \n        response = page.goto(page3_url)\n>       assert response.headers[\"content-type\"] == \"application/geo+json\"\nE       AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\nE         \nE         - application/geo+json\nE         + text/html;charset=UTF-8\n\ntests/datafeeder/test_ingest_data.py:67: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":1,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1741628640485,"stop":1741628640485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1741628640485,"stop":1741628640485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1741628640485,"stop":1741628640485,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1741628640486,"stop":1741628640486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright","time":{"start":1741628640486,"stop":1741628641027,"duration":541},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser_type_launch_args","time":{"start":1741628640486,"stop":1741628640486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"connect_options","time":{"start":1741628641028,"stop":1741628641028,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser_type","time":{"start":1741628641028,"stop":1741628641028,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"launch_browser","time":{"start":1741628641028,"stop":1741628641028,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1741628641029,"stop":1741628641744,"duration":715},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device","time":{"start":1741628641744,"stop":1741628641744,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pw_artifacts_folder","time":{"start":1741628641744,"stop":1741628641745,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser_context_args","time":{"start":1741628641745,"stop":1741628641745,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser_context_args","time":{"start":1741628641745,"stop":1741628641745,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_artifacts_recorder","time":{"start":1741628931056,"stop":1741628931056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"new_context","time":{"start":1741628931056,"stop":1741628931057,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"output_path","time":{"start":1741628931056,"stop":1741628931056,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context","time":{"start":1741628931057,"stop":1741628931083,"duration":26},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1741628931083,"stop":1741628931130,"duration":47},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"This test attempts to load a SHP file through datafeeder and check links.","status":"failed","statusMessage":"AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\n  \n  - application/geo+json\n  + text/html;charset=UTF-8","statusTrace":"page = <Page url='https://georchestra-127-0-0-1.nip.io/data/ogcapi/collections/antennes/items'>\n\n    @allure.epic(\"Datafeeder\")\n    @allure.feature(\"Ingestion\")\n    @allure.description(\"This test attempts to load a SHP file through datafeeder and check links.\")\n    @pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason=\"Write tests are disabled\")\n    def test_import_shp_datafeeder(page: Page):\n        login(page)\n        page.goto(\"/import/\")\n        screenshot_page(page, \"datafeeder\")\n        page.locator(\"input#undefined\").first.set_input_files(\"./fixtures/antenne.zip\")\n        page.get_by_role(\"checkbox\").check()\n        page.get_by_role(\"button\", name=\"Upload\").click()\n        page.get_by_role(\"button\", name=\"-\", exact=True).click()\n        page.get_by_role(\"button\", name=\"WGS84\").click()\n        page.get_by_role(\"button\", name=\"WGS84\").click()\n        page.get_by_role(\"button\", name=\"Lambert\").click()\n        page.get_by_role(\"button\", name=\"OK, my data are correct\").click()\n        page.locator(\"input[type=\\\"text\\\"]\").click()\n        page.locator(\"input[type=\\\"text\\\"]\").fill(\"Antennes\")\n        page.locator(\"textarea[name=\\\"textArea\\\"]\").click()\n        page.locator(\"textarea[name=\\\"textArea\\\"]\").fill(\"Awesome\")\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"textbox\").fill(\"a\")\n        page.locator(\"#tags div\").nth(1).click()\n        page.get_by_role(\"button\", name=\"Addresses\").click()\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"textbox\").click()\n        page.get_by_role(\"textbox\").fill(\"This is the process\")\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"button\", name=\"Submit\").click()\n        screenshot_page(page, \"after-submit-click\")\n        # wait for the data to be ingested\n        expect(page.get_by_role(\"button\", name=\"Metadata record\")).to_be_visible(timeout=45000)\n        screenshot_page(page, \"after-ingestion\")\n        expect(page.get_by_role(\"button\", name=\"Map viewer\")).to_be_visible()\n        with page.expect_popup() as page1_info:\n            page.get_by_role(\"button\", name=\"Metadata record\").click()\n        page1 = page1_info.value\n        page.wait_for_timeout(10000)\n        screenshot_page(page1, \"metadata\")\n        expect(page1.get_by_text(\"Awesome\").first).to_be_visible()\n        expect(page1.get_by_text(\"Antennes - WMS\")).to_be_visible()\n        page1.close()\n        with page.expect_popup() as page2_info:\n            page.get_by_role(\"button\", name=\"Map viewer\").click()\n        page2 = page2_info.value\n        screenshot_page(page2, \"mapviewer\")\n        expect(page2.locator(\"canvas\")).to_be_visible()\n        page2.close()\n        with page.expect_popup() as page3_info:\n            page.get_by_role(\"button\", name=\"OGC API\").click()\n        page3 = page3_info.value\n        page3_url = page3_info.value.url\n        screenshot_page(page3, \"ogcapi\")\n        expect(page3.locator(\"body\")).to_be_visible()\n        page3.close()\n    \n        response = page.goto(page3_url)\n>       assert response.headers[\"content-type\"] == \"application/geo+json\"\nE       AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\nE         \nE         - application/geo+json\nE         + text/html;charset=UTF-8\n\ntests/datafeeder/test_ingest_data.py:67: AssertionError","steps":[],"attachments":[{"uid":"cc8c1c58b582db84","name":"datafeeder","source":"cc8c1c58b582db84.png","type":"image/png","size":259193},{"uid":"162bd20624b9780d","name":"after-submit-click","source":"162bd20624b9780d.png","type":"image/png","size":232912},{"uid":"62e500cf258ae079","name":"after-ingestion","source":"62e500cf258ae079.png","type":"image/png","size":77777},{"uid":"bd59372404f10345","name":"metadata","source":"bd59372404f10345.png","type":"image/png","size":443717},{"uid":"234f4f3b4be0953","name":"mapviewer","source":"234f4f3b4be0953.png","type":"image/png","size":4935},{"uid":"c3307d73c4ff8c85","name":"ogcapi","source":"c3307d73c4ff8c85.png","type":"image/png","size":36209}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true},"afterStages":[{"name":"new_context::0","time":{"start":1741628957741,"stop":1741628958575,"duration":834},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_artifacts_recorder::0","time":{"start":1741628958575,"stop":1741628958581,"duration":6},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pw_artifacts_folder::0","time":{"start":1741628958948,"stop":1741628958948,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser::0","time":{"start":1741628958949,"stop":1741628959060,"duration":111},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright::0","time":{"start":1741628959062,"stop":1741628959074,"duration":12},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Datafeeder"},{"name":"feature","value":"Ingestion"},{"name":"tag","value":"@pytest.mark.skipif(condition=False, reason='Write tests are disabled')"},{"name":"parentSuite","value":"tests.datafeeder"},{"name":"suite","value":"test_ingest_data"},{"name":"host","value":"fv-az1921-127"},{"name":"thread","value":"16796-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.datafeeder.test_ingest_data"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser_name","value":"'chromium'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"bff850c97a025f59","status":"failed","statusDetails":"AssertionError: Locator expected to be visible\nActual value: <element(s) not found> \nCall log:\n  - LocatorAssertions.to_be_visible with timeout 45000ms\n  -   - waiting for get_by_role(\"button\", name=\"Metadata record\")","time":{"start":1741628867293,"stop":1741628930355,"duration":63062}}],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":6,"broken":4,"skipped":0,"passed":4,"unknown":0,"total":14},"items":[{"uid":"263299f165fdaddf","reportUrl":"https://georchestra.github.io/e2e-tests/95//#testresult/263299f165fdaddf","status":"failed","statusDetails":"AssertionError: Locator expected to be visible\nActual value: <element(s) not found> \nCall log:\n  - LocatorAssertions.to_be_visible with timeout 45000ms\n  -   - waiting for get_by_role(\"button\", name=\"Metadata record\")","time":{"start":1741581060655,"stop":1741581113900,"duration":53245}},{"uid":"8700242d4a4ad586","reportUrl":"https://georchestra.github.io/e2e-tests/94//#testresult/8700242d4a4ad586","status":"failed","statusDetails":"AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\n  \n  - application/geo+json\n  + text/html;charset=UTF-8","time":{"start":1741171842841,"stop":1741171867296,"duration":24455}},{"uid":"17bd961657f53ea3","reportUrl":"https://georchestra.github.io/e2e-tests/93//#testresult/17bd961657f53ea3","status":"failed","statusDetails":"AssertionError: Locator expected to be visible\nActual value: <element(s) not found> \nCall log:\n  - LocatorAssertions.to_be_visible with timeout 5000ms\n  -   - waiting for get_by_text(\"Awesome\").first","time":{"start":1741170096730,"stop":1741170134596,"duration":37866}},{"uid":"c387666a78887f52","reportUrl":"https://georchestra.github.io/e2e-tests/92//#testresult/c387666a78887f52","status":"broken","statusDetails":"playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nCall log:\n  - waiting for get_by_role(\"button\", name=\"Addresses\")","time":{"start":1741164177088,"stop":1741164220600,"duration":43512}},{"uid":"30f3465287feb8f6","reportUrl":"https://georchestra.github.io/e2e-tests/91//#testresult/30f3465287feb8f6","status":"failed","statusDetails":"AssertionError: Locator expected to be visible\nActual value: <element(s) not found> \nCall log:\n  - LocatorAssertions.to_be_visible with timeout 45000ms\n  -   - waiting for get_by_role(\"button\", name=\"Metadata record\")","time":{"start":1741103967174,"stop":1741104026964,"duration":59790}},{"uid":"eeeec5bdcebd6364","reportUrl":"https://georchestra.github.io/e2e-tests/90//#testresult/eeeec5bdcebd6364","status":"broken","statusDetails":"playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nCall log:\n  - waiting for get_by_role(\"link\", name=\"login\")","time":{"start":1741103156136,"stop":1741103186246,"duration":30110}},{"uid":"511f0ec5ecb70f81","reportUrl":"https://georchestra.github.io/e2e-tests/89//#testresult/511f0ec5ecb70f81","status":"failed","statusDetails":"AssertionError: Locator expected to be visible\nActual value: <element(s) not found> \nCall log:\n  - LocatorAssertions.to_be_visible with timeout 45000ms\n  -   - waiting for get_by_role(\"button\", name=\"Metadata record\")","time":{"start":1740976558297,"stop":1740976611054,"duration":52757}},{"uid":"e6b9e4eda4bf6da9","reportUrl":"https://georchestra.github.io/e2e-tests/88//#testresult/e6b9e4eda4bf6da9","status":"broken","statusDetails":"playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nCall log:\n  - waiting for get_by_role(\"button\", name=\"-\", exact=True)","time":{"start":1740371743036,"stop":1740371776185,"duration":33149}},{"uid":"ac213df401a4d151","reportUrl":"https://georchestra.github.io/e2e-tests/87//#testresult/ac213df401a4d151","status":"passed","time":{"start":1740162853461,"stop":1740162894428,"duration":40967}},{"uid":"7fe8d815f87b4269","reportUrl":"https://georchestra.github.io/e2e-tests/86//#testresult/7fe8d815f87b4269","status":"passed","time":{"start":1740161801331,"stop":1740161843754,"duration":42423}},{"uid":"52134c38f117140","reportUrl":"https://georchestra.github.io/e2e-tests/85//#testresult/52134c38f117140","status":"broken","statusDetails":"playwright._impl._errors.TimeoutError: Locator.click: Timeout 30000ms exceeded.\nCall log:\n  - waiting for get_by_role(\"button\", name=\"Addresses\")","time":{"start":1740160779703,"stop":1740160821983,"duration":42280}},{"uid":"cce7d7482e5efcd5","reportUrl":"https://georchestra.github.io/e2e-tests/84//#testresult/cce7d7482e5efcd5","status":"passed","time":{"start":1740159622905,"stop":1740159666774,"duration":43869}},{"uid":"2a38c6ad2e5d4c6","reportUrl":"https://georchestra.github.io/e2e-tests/82//#testresult/2a38c6ad2e5d4c6","status":"passed","time":{"start":1740157920153,"stop":1740157963358,"duration":43205}}]},"tags":["@pytest.mark.skipif(condition=False, reason='Write tests are disabled')"]},"source":"4de51037c38aadad.json","parameterValues":["'chromium'"]}