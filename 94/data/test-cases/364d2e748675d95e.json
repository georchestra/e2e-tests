{"uid":"364d2e748675d95e","name":"test_import_shp_datafeeder[chromium]","fullName":"tests.datafeeder.test_ingest_data#test_import_shp_datafeeder","historyId":"a5bfdde5cd0a9b039d7040d631f60f51","time":{"start":1741171802729,"stop":1741171841701,"duration":38972},"description":"This test attempts to load a SHP file through datafeeder and check links.","descriptionHtml":"<p>This test attempts to load a SHP file through datafeeder and check links.</p>\n","status":"failed","statusMessage":"AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\n  \n  - application/geo+json\n  + text/html;charset=UTF-8","statusTrace":"page = <Page url='https://georchestra-127-0-0-1.nip.io/data/ogcapi/collections/antennes/items'>\n\n    @allure.epic(\"Datafeeder\")\n    @allure.feature(\"Ingestion\")\n    @allure.description(\"This test attempts to load a SHP file through datafeeder and check links.\")\n    @pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason=\"Write tests are disabled\")\n    def test_import_shp_datafeeder(page: Page):\n        login(page)\n        page.goto(\"/import/\")\n        screenshot_page(page, \"datafeeder\")\n        page.locator(\"input#undefined\").first.set_input_files(\"./fixtures/antenne.zip\")\n        page.get_by_role(\"checkbox\").check()\n        page.get_by_role(\"button\", name=\"Upload\").click()\n        page.get_by_role(\"button\", name=\"-\", exact=True).click()\n        page.get_by_role(\"button\", name=\"WGS84\").click()\n        page.get_by_role(\"button\", name=\"WGS84\").click()\n        page.get_by_role(\"button\", name=\"Lambert\").click()\n        page.get_by_role(\"button\", name=\"OK, my data are correct\").click()\n        page.locator(\"input[type=\\\"text\\\"]\").click()\n        page.locator(\"input[type=\\\"text\\\"]\").fill(\"Antennes\")\n        page.locator(\"textarea[name=\\\"textArea\\\"]\").click()\n        page.locator(\"textarea[name=\\\"textArea\\\"]\").fill(\"Awesome\")\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"textbox\").fill(\"a\")\n        page.locator(\"#tags div\").nth(1).click()\n        page.get_by_role(\"button\", name=\"Addresses\").click()\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"textbox\").click()\n        page.get_by_role(\"textbox\").fill(\"This is the process\")\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"button\", name=\"Submit\").click()\n        screenshot_page(page, \"after-submit-click\")\n        # wait for the data to be ingested\n        expect(page.get_by_role(\"button\", name=\"Metadata record\")).to_be_visible(timeout=45000)\n        screenshot_page(page, \"after-ingestion\")\n        expect(page.get_by_role(\"button\", name=\"Map viewer\")).to_be_visible()\n        with page.expect_popup() as page1_info:\n            page.get_by_role(\"button\", name=\"Metadata record\").click()\n        page1 = page1_info.value\n        page.wait_for_timeout(10000)\n        screenshot_page(page1, \"metadata\")\n        expect(page1.get_by_text(\"Awesome\").first).to_be_visible()\n        expect(page1.get_by_text(\"Antennes - WMS\")).to_be_visible()\n        page1.close()\n        with page.expect_popup() as page2_info:\n            page.get_by_role(\"button\", name=\"Map viewer\").click()\n        page2 = page2_info.value\n        screenshot_page(page2, \"mapviewer\")\n        expect(page2.locator(\"canvas\")).to_be_visible()\n        page2.close()\n        with page.expect_popup() as page3_info:\n            page.get_by_role(\"button\", name=\"OGC API\").click()\n        page3 = page3_info.value\n        page3_url = page3_info.value.url\n        screenshot_page(page3, \"ogcapi\")\n        expect(page3.locator(\"body\")).to_be_visible()\n        page3.close()\n    \n        response = page.goto(page3_url)\n>       assert response.headers[\"content-type\"] == \"application/geo+json\"\nE       AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\nE         \nE         - application/geo+json\nE         + text/html;charset=UTF-8\n\ntests/datafeeder/test_ingest_data.py:67: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"base_url","time":{"start":1741171593573,"stop":1741171593574,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright","time":{"start":1741171593574,"stop":1741171594195,"duration":621},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1741171593574,"stop":1741171593574,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"pytestconfig","time":{"start":1741171593574,"stop":1741171593574,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser_type_launch_args","time":{"start":1741171593574,"stop":1741171593574,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1741171593574,"stop":1741171593574,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser","time":{"start":1741171594196,"stop":1741171594888,"duration":692},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser_type","time":{"start":1741171594196,"stop":1741171594196,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"connect_options","time":{"start":1741171594196,"stop":1741171594196,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"launch_browser","time":{"start":1741171594196,"stop":1741171594196,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser_context_args","time":{"start":1741171594889,"stop":1741171594889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pw_artifacts_folder","time":{"start":1741171594889,"stop":1741171594889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser_context_args","time":{"start":1741171594889,"stop":1741171594889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"device","time":{"start":1741171594889,"stop":1741171594889,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_artifacts_recorder","time":{"start":1741171802653,"stop":1741171802653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"output_path","time":{"start":1741171802653,"stop":1741171802653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"new_context","time":{"start":1741171802653,"stop":1741171802653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"context","time":{"start":1741171802653,"stop":1741171802684,"duration":31},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"page","time":{"start":1741171802684,"stop":1741171802726,"duration":42},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"testStage":{"description":"This test attempts to load a SHP file through datafeeder and check links.","status":"failed","statusMessage":"AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\n  \n  - application/geo+json\n  + text/html;charset=UTF-8","statusTrace":"page = <Page url='https://georchestra-127-0-0-1.nip.io/data/ogcapi/collections/antennes/items'>\n\n    @allure.epic(\"Datafeeder\")\n    @allure.feature(\"Ingestion\")\n    @allure.description(\"This test attempts to load a SHP file through datafeeder and check links.\")\n    @pytest.mark.skipif(condition=ConfigurationManager.write_tests_disabled(), reason=\"Write tests are disabled\")\n    def test_import_shp_datafeeder(page: Page):\n        login(page)\n        page.goto(\"/import/\")\n        screenshot_page(page, \"datafeeder\")\n        page.locator(\"input#undefined\").first.set_input_files(\"./fixtures/antenne.zip\")\n        page.get_by_role(\"checkbox\").check()\n        page.get_by_role(\"button\", name=\"Upload\").click()\n        page.get_by_role(\"button\", name=\"-\", exact=True).click()\n        page.get_by_role(\"button\", name=\"WGS84\").click()\n        page.get_by_role(\"button\", name=\"WGS84\").click()\n        page.get_by_role(\"button\", name=\"Lambert\").click()\n        page.get_by_role(\"button\", name=\"OK, my data are correct\").click()\n        page.locator(\"input[type=\\\"text\\\"]\").click()\n        page.locator(\"input[type=\\\"text\\\"]\").fill(\"Antennes\")\n        page.locator(\"textarea[name=\\\"textArea\\\"]\").click()\n        page.locator(\"textarea[name=\\\"textArea\\\"]\").fill(\"Awesome\")\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"textbox\").fill(\"a\")\n        page.locator(\"#tags div\").nth(1).click()\n        page.get_by_role(\"button\", name=\"Addresses\").click()\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"textbox\").click()\n        page.get_by_role(\"textbox\").fill(\"This is the process\")\n        page.get_by_role(\"button\", name=\"next\").click()\n        page.get_by_role(\"button\", name=\"Submit\").click()\n        screenshot_page(page, \"after-submit-click\")\n        # wait for the data to be ingested\n        expect(page.get_by_role(\"button\", name=\"Metadata record\")).to_be_visible(timeout=45000)\n        screenshot_page(page, \"after-ingestion\")\n        expect(page.get_by_role(\"button\", name=\"Map viewer\")).to_be_visible()\n        with page.expect_popup() as page1_info:\n            page.get_by_role(\"button\", name=\"Metadata record\").click()\n        page1 = page1_info.value\n        page.wait_for_timeout(10000)\n        screenshot_page(page1, \"metadata\")\n        expect(page1.get_by_text(\"Awesome\").first).to_be_visible()\n        expect(page1.get_by_text(\"Antennes - WMS\")).to_be_visible()\n        page1.close()\n        with page.expect_popup() as page2_info:\n            page.get_by_role(\"button\", name=\"Map viewer\").click()\n        page2 = page2_info.value\n        screenshot_page(page2, \"mapviewer\")\n        expect(page2.locator(\"canvas\")).to_be_visible()\n        page2.close()\n        with page.expect_popup() as page3_info:\n            page.get_by_role(\"button\", name=\"OGC API\").click()\n        page3 = page3_info.value\n        page3_url = page3_info.value.url\n        screenshot_page(page3, \"ogcapi\")\n        expect(page3.locator(\"body\")).to_be_visible()\n        page3.close()\n    \n        response = page.goto(page3_url)\n>       assert response.headers[\"content-type\"] == \"application/geo+json\"\nE       AssertionError: assert 'text/html;charset=UTF-8' == 'application/geo+json'\nE         \nE         - application/geo+json\nE         + text/html;charset=UTF-8\n\ntests/datafeeder/test_ingest_data.py:67: AssertionError","steps":[],"attachments":[{"uid":"67b3f6799f278d2f","name":"datafeeder","source":"67b3f6799f278d2f.png","type":"image/png","size":259193},{"uid":"40193abbac9d2506","name":"after-submit-click","source":"40193abbac9d2506.png","type":"image/png","size":320780},{"uid":"904f06ea45a3e08a","name":"after-ingestion","source":"904f06ea45a3e08a.png","type":"image/png","size":77777},{"uid":"831c1d94102f1129","name":"metadata","source":"831c1d94102f1129.png","type":"image/png","size":443582},{"uid":"af693b0ab9d07298","name":"mapviewer","source":"af693b0ab9d07298.png","type":"image/png","size":4935},{"uid":"d12f614f4729e09e","name":"ogcapi","source":"d12f614f4729e09e.png","type":"image/png","size":36209}],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":6,"hasContent":true},"afterStages":[{"name":"new_context::0","time":{"start":1741171841733,"stop":1741171842761,"duration":1028},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_artifacts_recorder::0","time":{"start":1741171842762,"stop":1741171842765,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_pw_artifacts_folder::0","time":{"start":1741171868736,"stop":1741171868736,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"browser::0","time":{"start":1741171868737,"stop":1741171868845,"duration":108},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"playwright::0","time":{"start":1741171868847,"stop":1741171868864,"duration":17},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"labels":[{"name":"epic","value":"Datafeeder"},{"name":"feature","value":"Ingestion"},{"name":"tag","value":"@pytest.mark.skipif(condition=False, reason='Write tests are disabled')"},{"name":"parentSuite","value":"tests.datafeeder"},{"name":"suite","value":"test_ingest_data"},{"name":"host","value":"fv-az1928-953"},{"name":"thread","value":"16737-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.datafeeder.test_ingest_data"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser_name","value":"'chromium'"}],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.skipif(condition=False, reason='Write tests are disabled')"]},"source":"364d2e748675d95e.json","parameterValues":["'chromium'"]}