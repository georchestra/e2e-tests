{"uid":"ec5160eefe149f28","name":"Test the data-api headers","fullName":"tests.00-georchestra-base.test_georchestra_headers#test_data_api_no_double_access_control_allow_origin","historyId":"5937039afcc24bd0f2f802f023ca9b9e","time":{"start":1745930808639,"stop":1745930809533,"duration":894},"description":"Test if data-api response headers contains only one Access-Control-Allow-Origin header.","descriptionHtml":"<p>Test if data-api response headers contains only one Access-Control-Allow-Origin header.</p>\n","status":"failed","statusMessage":"AssertionError: There should be only one header with Access-Control-Allow-Origin\nassert None == '*'","statusTrace":"base_url = 'https://georchestra-127-0-0-1.nip.io'\n\n    @allure.epic(\"Data API\")\n    @allure.feature(\"Headers\")\n    @allure.description(\"Test if data-api response headers contains only one Access-Control-Allow-Origin header.\")\n    @allure.title(\"Test the data-api headers\")\n    def test_data_api_no_double_access_control_allow_origin(base_url):\n        url = base_url + \"/data/ogcapi/\"\n        headers = {\"Origin\": base_url}\n    \n        response = requests.get(url, headers=headers, verify=False)\n        response.raise_for_status()\n    \n        access_control_allow_origin_header = response.headers.get(\"Access-Control-Allow-Origin\")\n        # If two headers are present (e.g * and *) response.headers.get(\"Access-Control-Allow-Origin\") returns \"*, *\"\n>       assert access_control_allow_origin_header == \"*\", \"There should be only one header with Access-Control-Allow-Origin\"\nE       AssertionError: There should be only one header with Access-Control-Allow-Origin\nE       assert None == '*'\n\ntests/00-georchestra-base/test_georchestra_headers.py:19: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745930386574,"stop":1745930386574,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1745930386574,"stop":1745930386574,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1745930386576,"stop":1745930386576,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1745930386576,"stop":1745930386576,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"epic","value":"Data API"},{"name":"feature","value":"Headers"},{"name":"parentSuite","value":"tests.00-georchestra-base"},{"name":"suite","value":"test_georchestra_headers"},{"name":"host","value":"fv-az1781-668"},{"name":"thread","value":"17732-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.00-georchestra-base.test_georchestra_headers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"ec5160eefe149f28.json","parameterValues":[]}