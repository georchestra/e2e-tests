{"uid":"e60a45eddba7bbdf","name":"Test the Geoserver headers","fullName":"tests.00-georchestra-base.test_georchestra_headers#test_geoserver_wms_no_double_access_control_allow_origin","historyId":"4e12e5606eb1439b1a5f31778192d41d","time":{"start":1745933834747,"stop":1745933834857,"duration":110},"description":"This test attempts to load GeoNetwork.","descriptionHtml":"<p>This test attempts to load GeoNetwork.</p>\n","status":"failed","statusMessage":"AssertionError: There should be only one header with Access-Control-Allow-Origin\nassert 'http://localhost:1234/' == 'https://geor...-0-0-1.nip.io'\n  \n  - https://georchestra-127-0-0-1.nip.io\n  + http://localhost:1234/","statusTrace":"base_url = 'https://georchestra-127-0-0-1.nip.io'\n\n    @allure.epic(\"Geoserver\")\n    @allure.feature(\"Headers\")\n    @allure.description(\"This test attempts to load GeoNetwork.\")\n    @allure.title(\"Test the Geoserver headers\")\n    def test_geoserver_wms_no_double_access_control_allow_origin(base_url: str):\n        url = base_url + \"/geoserver/wms\"\n        headers = {\"Origin\": \"http://localhost:1234/\"}\n    \n        response = requests.get(url, headers=headers, verify=False)\n        response.raise_for_status()\n    \n        access_control_allow_origin_header = response.headers.get(\"Access-Control-Allow-Origin\")\n        # If two headers are present (e.g * and *) response.headers.get(\"Access-Control-Allow-Origin\") returns \"*, *\"\n>       assert access_control_allow_origin_header == \"https://georchestra-127-0-0-1.nip.io\", \\\n            \"There should be only one header with Access-Control-Allow-Origin\"\nE       AssertionError: There should be only one header with Access-Control-Allow-Origin\nE       assert 'http://localhost:1234/' == 'https://geor...-0-0-1.nip.io'\nE         \nE         - https://georchestra-127-0-0-1.nip.io\nE         + http://localhost:1234/\n\ntests/00-georchestra-base/test_georchestra_headers.py:34: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"pytestconfig","time":{"start":1745933506486,"stop":1745933506486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"delete_output_dir","time":{"start":1745933506486,"stop":1745933506486,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"_verify_url","time":{"start":1745933506490,"stop":1745933506490,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false},{"name":"base_url","time":{"start":1745933506490,"stop":1745933506490,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false}],"afterStages":[],"labels":[{"name":"epic","value":"Geoserver"},{"name":"feature","value":"Headers"},{"name":"parentSuite","value":"tests.00-georchestra-base"},{"name":"suite","value":"test_georchestra_headers"},{"name":"host","value":"fv-az1781-668"},{"name":"thread","value":"17862-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.00-georchestra-base.test_georchestra_headers"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"e60a45eddba7bbdf.json","parameterValues":[]}